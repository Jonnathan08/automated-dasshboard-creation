# coding: utf-8

"""
    Compass - Request Tracker

    API documentation for Compass - Request Tracker. This document contains a complete list of fields for a Compass request accessible to an admin. An authorized user may only read, write, and update certain fields or delete based on their role. All requests require a valid OAuth2 Bearer Token passed as a header that is associated with a Cisco CEC user account.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: compass-devcx@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ColumnConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'column_config_id': 'int',
        'column_name': 'ColumnNameSchema',
        'column_values': 'ColumnValuesSchema',
        'modified_by': 'ModifiedBySchema',
        'modified_dtm': 'ModifiedDtmSchema'
    }

    attribute_map = {
        'column_config_id': 'columnConfigId',
        'column_name': 'columnName',
        'column_values': 'columnValues',
        'modified_by': 'modifiedBy',
        'modified_dtm': 'modifiedDtm'
    }

    def __init__(self, column_config_id=None, column_name=None, column_values=None, modified_by=None, modified_dtm=None):  # noqa: E501
        """ColumnConfig - a model defined in Swagger"""  # noqa: E501
        self._column_config_id = None
        self._column_name = None
        self._column_values = None
        self._modified_by = None
        self._modified_dtm = None
        self.discriminator = None
        if column_config_id is not None:
            self.column_config_id = column_config_id
        if column_name is not None:
            self.column_name = column_name
        if column_values is not None:
            self.column_values = column_values
        if modified_by is not None:
            self.modified_by = modified_by
        if modified_dtm is not None:
            self.modified_dtm = modified_dtm

    @property
    def column_config_id(self):
        """Gets the column_config_id of this ColumnConfig.  # noqa: E501


        :return: The column_config_id of this ColumnConfig.  # noqa: E501
        :rtype: int
        """
        return self._column_config_id

    @column_config_id.setter
    def column_config_id(self, column_config_id):
        """Sets the column_config_id of this ColumnConfig.


        :param column_config_id: The column_config_id of this ColumnConfig.  # noqa: E501
        :type: int
        """

        self._column_config_id = column_config_id

    @property
    def column_name(self):
        """Gets the column_name of this ColumnConfig.  # noqa: E501


        :return: The column_name of this ColumnConfig.  # noqa: E501
        :rtype: ColumnNameSchema
        """
        return self._column_name

    @column_name.setter
    def column_name(self, column_name):
        """Sets the column_name of this ColumnConfig.


        :param column_name: The column_name of this ColumnConfig.  # noqa: E501
        :type: ColumnNameSchema
        """

        self._column_name = column_name

    @property
    def column_values(self):
        """Gets the column_values of this ColumnConfig.  # noqa: E501


        :return: The column_values of this ColumnConfig.  # noqa: E501
        :rtype: ColumnValuesSchema
        """
        return self._column_values

    @column_values.setter
    def column_values(self, column_values):
        """Sets the column_values of this ColumnConfig.


        :param column_values: The column_values of this ColumnConfig.  # noqa: E501
        :type: ColumnValuesSchema
        """

        self._column_values = column_values

    @property
    def modified_by(self):
        """Gets the modified_by of this ColumnConfig.  # noqa: E501


        :return: The modified_by of this ColumnConfig.  # noqa: E501
        :rtype: ModifiedBySchema
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this ColumnConfig.


        :param modified_by: The modified_by of this ColumnConfig.  # noqa: E501
        :type: ModifiedBySchema
        """

        self._modified_by = modified_by

    @property
    def modified_dtm(self):
        """Gets the modified_dtm of this ColumnConfig.  # noqa: E501


        :return: The modified_dtm of this ColumnConfig.  # noqa: E501
        :rtype: ModifiedDtmSchema
        """
        return self._modified_dtm

    @modified_dtm.setter
    def modified_dtm(self, modified_dtm):
        """Sets the modified_dtm of this ColumnConfig.


        :param modified_dtm: The modified_dtm of this ColumnConfig.  # noqa: E501
        :type: ModifiedDtmSchema
        """

        self._modified_dtm = modified_dtm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ColumnConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ColumnConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
