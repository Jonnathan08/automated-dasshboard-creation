# coding: utf-8

"""
    Compass - Request Tracker

    API documentation for Compass - Request Tracker. This document contains a complete list of fields for a Compass request accessible to an admin. An authorized user may only read, write, and update certain fields or delete based on their role. All requests require a valid OAuth2 Bearer Token passed as a header that is associated with a Cisco CEC user account.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: compass-devcx@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class View(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'view_id': 'int',
        'username': 'str',
        'view_name': 'ViewNameSchema',
        'base_columns': 'list[ViewBaseColumns]',
        'sorting': 'ViewSort',
        'filters': 'ViewFilters',
        'page_limit': 'int',
        'is_public_flag': 'IsPublicFlagSchema',
        'description': 'str',
        'created_dtm': 'datetime',
        'modified_dtm': 'ModifiedDtmSchema',
        'last_accessed_dtm': 'datetime'
    }

    attribute_map = {
        'view_id': 'viewId',
        'username': 'username',
        'view_name': 'viewName',
        'base_columns': 'baseColumns',
        'sorting': 'sorting',
        'filters': 'filters',
        'page_limit': 'pageLimit',
        'is_public_flag': 'isPublicFlag',
        'description': 'description',
        'created_dtm': 'createdDtm',
        'modified_dtm': 'modifiedDtm',
        'last_accessed_dtm': 'lastAccessedDtm'
    }

    def __init__(self, view_id=None, username=None, view_name=None, base_columns=None, sorting=None, filters=None, page_limit=None, is_public_flag=None, description=None, created_dtm=None, modified_dtm=None, last_accessed_dtm=None):  # noqa: E501
        """View - a model defined in Swagger"""  # noqa: E501
        self._view_id = None
        self._username = None
        self._view_name = None
        self._base_columns = None
        self._sorting = None
        self._filters = None
        self._page_limit = None
        self._is_public_flag = None
        self._description = None
        self._created_dtm = None
        self._modified_dtm = None
        self._last_accessed_dtm = None
        self.discriminator = None
        self.view_id = view_id
        self.username = username
        self.view_name = view_name
        self.base_columns = base_columns
        self.sorting = sorting
        self.filters = filters
        self.page_limit = page_limit
        self.is_public_flag = is_public_flag
        self.description = description
        self.created_dtm = created_dtm
        self.modified_dtm = modified_dtm
        self.last_accessed_dtm = last_accessed_dtm

    @property
    def view_id(self):
        """Gets the view_id of this View.  # noqa: E501


        :return: The view_id of this View.  # noqa: E501
        :rtype: int
        """
        return self._view_id

    @view_id.setter
    def view_id(self, view_id):
        """Sets the view_id of this View.


        :param view_id: The view_id of this View.  # noqa: E501
        :type: int
        """
        if view_id is None:
            raise ValueError("Invalid value for `view_id`, must not be `None`")  # noqa: E501

        self._view_id = view_id

    @property
    def username(self):
        """Gets the username of this View.  # noqa: E501


        :return: The username of this View.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this View.


        :param username: The username of this View.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def view_name(self):
        """Gets the view_name of this View.  # noqa: E501


        :return: The view_name of this View.  # noqa: E501
        :rtype: ViewNameSchema
        """
        return self._view_name

    @view_name.setter
    def view_name(self, view_name):
        """Sets the view_name of this View.


        :param view_name: The view_name of this View.  # noqa: E501
        :type: ViewNameSchema
        """
        if view_name is None:
            raise ValueError("Invalid value for `view_name`, must not be `None`")  # noqa: E501

        self._view_name = view_name

    @property
    def base_columns(self):
        """Gets the base_columns of this View.  # noqa: E501


        :return: The base_columns of this View.  # noqa: E501
        :rtype: list[ViewBaseColumns]
        """
        return self._base_columns

    @base_columns.setter
    def base_columns(self, base_columns):
        """Sets the base_columns of this View.


        :param base_columns: The base_columns of this View.  # noqa: E501
        :type: list[ViewBaseColumns]
        """
        if base_columns is None:
            raise ValueError("Invalid value for `base_columns`, must not be `None`")  # noqa: E501

        self._base_columns = base_columns

    @property
    def sorting(self):
        """Gets the sorting of this View.  # noqa: E501


        :return: The sorting of this View.  # noqa: E501
        :rtype: ViewSort
        """
        return self._sorting

    @sorting.setter
    def sorting(self, sorting):
        """Sets the sorting of this View.


        :param sorting: The sorting of this View.  # noqa: E501
        :type: ViewSort
        """
        if sorting is None:
            raise ValueError("Invalid value for `sorting`, must not be `None`")  # noqa: E501

        self._sorting = sorting

    @property
    def filters(self):
        """Gets the filters of this View.  # noqa: E501


        :return: The filters of this View.  # noqa: E501
        :rtype: ViewFilters
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this View.


        :param filters: The filters of this View.  # noqa: E501
        :type: ViewFilters
        """
        if filters is None:
            raise ValueError("Invalid value for `filters`, must not be `None`")  # noqa: E501

        self._filters = filters

    @property
    def page_limit(self):
        """Gets the page_limit of this View.  # noqa: E501


        :return: The page_limit of this View.  # noqa: E501
        :rtype: int
        """
        return self._page_limit

    @page_limit.setter
    def page_limit(self, page_limit):
        """Sets the page_limit of this View.


        :param page_limit: The page_limit of this View.  # noqa: E501
        :type: int
        """
        if page_limit is None:
            raise ValueError("Invalid value for `page_limit`, must not be `None`")  # noqa: E501

        self._page_limit = page_limit

    @property
    def is_public_flag(self):
        """Gets the is_public_flag of this View.  # noqa: E501


        :return: The is_public_flag of this View.  # noqa: E501
        :rtype: IsPublicFlagSchema
        """
        return self._is_public_flag

    @is_public_flag.setter
    def is_public_flag(self, is_public_flag):
        """Sets the is_public_flag of this View.


        :param is_public_flag: The is_public_flag of this View.  # noqa: E501
        :type: IsPublicFlagSchema
        """
        if is_public_flag is None:
            raise ValueError("Invalid value for `is_public_flag`, must not be `None`")  # noqa: E501

        self._is_public_flag = is_public_flag

    @property
    def description(self):
        """Gets the description of this View.  # noqa: E501


        :return: The description of this View.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this View.


        :param description: The description of this View.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def created_dtm(self):
        """Gets the created_dtm of this View.  # noqa: E501


        :return: The created_dtm of this View.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dtm

    @created_dtm.setter
    def created_dtm(self, created_dtm):
        """Sets the created_dtm of this View.


        :param created_dtm: The created_dtm of this View.  # noqa: E501
        :type: datetime
        """
        if created_dtm is None:
            raise ValueError("Invalid value for `created_dtm`, must not be `None`")  # noqa: E501

        self._created_dtm = created_dtm

    @property
    def modified_dtm(self):
        """Gets the modified_dtm of this View.  # noqa: E501


        :return: The modified_dtm of this View.  # noqa: E501
        :rtype: ModifiedDtmSchema
        """
        return self._modified_dtm

    @modified_dtm.setter
    def modified_dtm(self, modified_dtm):
        """Sets the modified_dtm of this View.


        :param modified_dtm: The modified_dtm of this View.  # noqa: E501
        :type: ModifiedDtmSchema
        """
        if modified_dtm is None:
            raise ValueError("Invalid value for `modified_dtm`, must not be `None`")  # noqa: E501

        self._modified_dtm = modified_dtm

    @property
    def last_accessed_dtm(self):
        """Gets the last_accessed_dtm of this View.  # noqa: E501


        :return: The last_accessed_dtm of this View.  # noqa: E501
        :rtype: datetime
        """
        return self._last_accessed_dtm

    @last_accessed_dtm.setter
    def last_accessed_dtm(self, last_accessed_dtm):
        """Sets the last_accessed_dtm of this View.


        :param last_accessed_dtm: The last_accessed_dtm of this View.  # noqa: E501
        :type: datetime
        """
        if last_accessed_dtm is None:
            raise ValueError("Invalid value for `last_accessed_dtm`, must not be `None`")  # noqa: E501

        self._last_accessed_dtm = last_accessed_dtm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(View, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, View):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
