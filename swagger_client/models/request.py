# coding: utf-8

"""
    Compass - Request Tracker

    API documentation for Compass - Request Tracker. This document contains a complete list of fields for a Compass request accessible to an admin. An authorized user may only read, write, and update certain fields or delete based on their role. All requests require a valid OAuth2 Bearer Token passed as a header that is associated with a Cisco CEC user account.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: compass-devcx@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Request(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_id': 'RequestIdSchema',
        'account_name': 'AccountNameSchema',
        'advisor_assigned': 'AdvisorAssignedSchema',
        'advisor_notes': 'AdvisorNotesSchema',
        'appliance_id': 'ApplianceIdSchema',
        'bcs_estimate': 'BcsEstimateSchema',
        'be_geo_id': 'BeGeoIdSchema',
        'campaign_name': 'CampaignNameSchema',
        'cav_id': 'CavIdSchema',
        'compass_ppt_url': 'CompassPptUrlSchema',
        'compass_url': 'CompassUrlSchema',
        'completed_dtm': 'CompletedDtmSchema',
        'concierge_account_team_notes': 'ConciergeAccountTeamNotesSchema',
        'concierge_advisor_assigned': 'ConciergeAdvisorAssignedSchema',
        'concierge_business_objective': 'ConciergeBusinessObjectiveSchema',
        'concierge_external_readout_dt': 'ConciergeExternalReadoutDtSchema',
        'concierge_external_readout_result': 'ConciergeExternalReadoutResultSchema',
        'concierge_internal_readout_dt': 'ConciergeInternalReadoutDtSchema',
        'concierge_internal_result': 'ConciergeInternalResultSchema',
        'concierge_requested_flag': 'ConciergeRequestedFlagSchema',
        'contract_number': 'ContractNumberSchema',
        'coverage_report_requested_flag': 'CoverageReportRequestedFlagSchema',
        'cr_party_id': 'CrPartyIdSchema',
        'cr_party_name': 'CrPartyNameSchema',
        'customer_identifier': 'CustomerIdentifierSchema',
        'deal_id': 'DealIdSchema',
        'declined_reason': 'DeclinedReasonSchema',
        'distribution_list': 'DistributionListSchema',
        'ec_estimate': 'EcEstimateSchema',
        'email_sent_flag': 'EmailSentFlagSchema',
        'email_sent_to_ssx_flag': 'EmailSentToSsxFlagSchema',
        'estimator_value': 'EstimatorValueSchema',
        'failure_details': 'FailureDetailsSchema',
        'gu_id': 'GuIdSchema',
        'inventory_name': 'InventoryNameSchema',
        'items_recommended': 'ItemsRecommendedSchema',
        'low_volume_count': 'LowVolumeCountSchema',
        'offer_creator_coverage_report_url': 'OfferCreatorCoverageReportUrlSchema',
        'offer_creator_declined_reason': 'OfferCreatorDeclinedReasonSchema',
        'offer_creator_email': 'OfferCreatorEmailSchema',
        'offer_creator_notes': 'OfferCreatorNotesSchema',
        'offer_creator_offer_created': 'OfferCreatorOfferCreatedSchema',
        'offer_creator_readout_dt': 'OfferCreatorReadoutDtSchema',
        'offer_creator_readout_status': 'OfferCreatorReadoutStatusSchema',
        'modified_by': 'ModifiedBySchema',
        'modified_dtm': 'ModifiedDtmSchema',
        'next_steps': 'NextStepsSchema',
        'oa_package_type': 'OaPackageTypeSchema',
        'oppty_id': 'OpptyIdSchema',
        'oppty_name': 'OpptyNameSchema',
        'op_url': 'OpUrlSchema',
        'partner_name': 'PartnerNameSchema',
        'partner_approved_entitlements': 'PartnerApprovedEntitlementsSchema',
        'partner_requested_entitlements': 'PartnerRequestedEntitlementsSchema',
        'readout_delivery_status': 'ReadoutDeliveryStatusSchema',
        'readout_done_dt': 'ReadoutDoneDtSchema',
        'report_exist_flag': 'ReportExistFlagSchema',
        'request_created_by': 'RequestCreatedBySchema',
        'report_type': 'ReportTypeSchema',
        'requested_dtm': 'RequestedDtmSchema',
        'requester_comments': 'RequesterCommentsSchema',
        'requester_function': 'RequesterFunctionSchema',
        'requester_name': 'RequesterNameSchema',
        'request_type': 'RequestTypeSchema',
        'risk_score': 'RiskScoreSchema',
        'rr_internal': 'RrInternalSchema',
        'sales_cx_team': 'SalesCxTeamSchema',
        'sales_level1': 'SalesLevel1Schema',
        'sales_level2': 'SalesLevel2Schema',
        'sales_level3': 'SalesLevel3Schema',
        'sales_level4': 'SalesLevel4Schema',
        'sales_level5': 'SalesLevel5Schema',
        'sales_level6': 'SalesLevel6Schema',
        'sav_id': 'SavIdSchema',
        'sntc_estimate': 'SntcEstimateSchema',
        'sspt_estimate': 'SsptEstimateSchema',
        'ssp': 'SspSchema',
        'status': 'StatusSchema',
        'st_estimate': 'StEstimateSchema',
        'tableau_project_name': 'TableauProjectNameSchema',
        'targeted_fiscal_month': 'TargetedFiscalMonthSchema',
        'target_request_id': 'TargetRequestIdSchema',
        'target_request_type': 'TargetRequestTypeSchema',
        'written_loa_url': 'WrittenLoaUrlForPatchSchema'
    }

    attribute_map = {
        'request_id': 'requestId',
        'account_name': 'accountName',
        'advisor_assigned': 'advisorAssigned',
        'advisor_notes': 'advisorNotes',
        'appliance_id': 'applianceId',
        'bcs_estimate': 'bcsEstimate',
        'be_geo_id': 'beGeoId',
        'campaign_name': 'campaignName',
        'cav_id': 'cavId',
        'compass_ppt_url': 'compassPptUrl',
        'compass_url': 'compassUrl',
        'completed_dtm': 'completedDtm',
        'concierge_account_team_notes': 'conciergeAccountTeamNotes',
        'concierge_advisor_assigned': 'conciergeAdvisorAssigned',
        'concierge_business_objective': 'conciergeBusinessObjective',
        'concierge_external_readout_dt': 'conciergeExternalReadoutDt',
        'concierge_external_readout_result': 'conciergeExternalReadoutResult',
        'concierge_internal_readout_dt': 'conciergeInternalReadoutDt',
        'concierge_internal_result': 'conciergeInternalResult',
        'concierge_requested_flag': 'conciergeRequestedFlag',
        'contract_number': 'contractNumber',
        'coverage_report_requested_flag': 'coverageReportRequestedFlag',
        'cr_party_id': 'crPartyId',
        'cr_party_name': 'crPartyName',
        'customer_identifier': 'customerIdentifier',
        'deal_id': 'dealId',
        'declined_reason': 'declinedReason',
        'distribution_list': 'distributionList',
        'ec_estimate': 'ecEstimate',
        'email_sent_flag': 'emailSentFlag',
        'email_sent_to_ssx_flag': 'emailSentToSsxFlag',
        'estimator_value': 'estimatorValue',
        'failure_details': 'failureDetails',
        'gu_id': 'guId',
        'inventory_name': 'inventoryName',
        'items_recommended': 'itemsRecommended',
        'low_volume_count': 'lowVolumeCount',
        'offer_creator_coverage_report_url': 'offerCreatorCoverageReportUrl',
        'offer_creator_declined_reason': 'offerCreatorDeclinedReason',
        'offer_creator_email': 'offerCreatorEmail',
        'offer_creator_notes': 'offerCreatorNotes',
        'offer_creator_offer_created': 'offerCreatorOfferCreated',
        'offer_creator_readout_dt': 'offerCreatorReadoutDt',
        'offer_creator_readout_status': 'offerCreatorReadoutStatus',
        'modified_by': 'modifiedBy',
        'modified_dtm': 'modifiedDtm',
        'next_steps': 'nextSteps',
        'oa_package_type': 'oaPackageType',
        'oppty_id': 'opptyId',
        'oppty_name': 'opptyName',
        'op_url': 'opUrl',
        'partner_name': 'partnerName',
        'partner_approved_entitlements': 'partnerApprovedEntitlements',
        'partner_requested_entitlements': 'partnerRequestedEntitlements',
        'readout_delivery_status': 'readoutDeliveryStatus',
        'readout_done_dt': 'readoutDoneDt',
        'report_exist_flag': 'reportExistFlag',
        'request_created_by': 'requestCreatedBy',
        'report_type': 'reportType',
        'requested_dtm': 'requestedDtm',
        'requester_comments': 'requesterComments',
        'requester_function': 'requesterFunction',
        'requester_name': 'requesterName',
        'request_type': 'requestType',
        'risk_score': 'riskScore',
        'rr_internal': 'rrInternal',
        'sales_cx_team': 'salesCxTeam',
        'sales_level1': 'salesLevel1',
        'sales_level2': 'salesLevel2',
        'sales_level3': 'salesLevel3',
        'sales_level4': 'salesLevel4',
        'sales_level5': 'salesLevel5',
        'sales_level6': 'salesLevel6',
        'sav_id': 'savId',
        'sntc_estimate': 'sntcEstimate',
        'sspt_estimate': 'ssptEstimate',
        'ssp': 'ssp',
        'status': 'status',
        'st_estimate': 'stEstimate',
        'tableau_project_name': 'tableauProjectName',
        'targeted_fiscal_month': 'targetedFiscalMonth',
        'target_request_id': 'targetRequestId',
        'target_request_type': 'targetRequestType',
        'written_loa_url': 'writtenLoaUrl'
    }

    def __init__(self, request_id=None, account_name=None, advisor_assigned=None, advisor_notes=None, appliance_id=None, bcs_estimate=None, be_geo_id=None, campaign_name=None, cav_id=None, compass_ppt_url=None, compass_url=None, completed_dtm=None, concierge_account_team_notes=None, concierge_advisor_assigned=None, concierge_business_objective=None, concierge_external_readout_dt=None, concierge_external_readout_result=None, concierge_internal_readout_dt=None, concierge_internal_result=None, concierge_requested_flag=None, contract_number=None, coverage_report_requested_flag=None, cr_party_id=None, cr_party_name=None, customer_identifier=None, deal_id=None, declined_reason=None, distribution_list=None, ec_estimate=None, email_sent_flag=None, email_sent_to_ssx_flag=None, estimator_value=None, failure_details=None, gu_id=None, inventory_name=None, items_recommended=None, low_volume_count=None, offer_creator_coverage_report_url=None, offer_creator_declined_reason=None, offer_creator_email=None, offer_creator_notes=None, offer_creator_offer_created=None, offer_creator_readout_dt=None, offer_creator_readout_status=None, modified_by=None, modified_dtm=None, next_steps=None, oa_package_type=None, oppty_id=None, oppty_name=None, op_url=None, partner_name=None, partner_approved_entitlements=None, partner_requested_entitlements=None, readout_delivery_status=None, readout_done_dt=None, report_exist_flag=None, request_created_by=None, report_type=None, requested_dtm=None, requester_comments=None, requester_function=None, requester_name=None, request_type=None, risk_score=None, rr_internal=None, sales_cx_team=None, sales_level1=None, sales_level2=None, sales_level3=None, sales_level4=None, sales_level5=None, sales_level6=None, sav_id=None, sntc_estimate=None, sspt_estimate=None, ssp=None, status=None, st_estimate=None, tableau_project_name=None, targeted_fiscal_month=None, target_request_id=None, target_request_type=None, written_loa_url=None):  # noqa: E501
        """Request - a model defined in Swagger"""  # noqa: E501
        self._request_id = None
        self._account_name = None
        self._advisor_assigned = None
        self._advisor_notes = None
        self._appliance_id = None
        self._bcs_estimate = None
        self._be_geo_id = None
        self._campaign_name = None
        self._cav_id = None
        self._compass_ppt_url = None
        self._compass_url = None
        self._completed_dtm = None
        self._concierge_account_team_notes = None
        self._concierge_advisor_assigned = None
        self._concierge_business_objective = None
        self._concierge_external_readout_dt = None
        self._concierge_external_readout_result = None
        self._concierge_internal_readout_dt = None
        self._concierge_internal_result = None
        self._concierge_requested_flag = None
        self._contract_number = None
        self._coverage_report_requested_flag = None
        self._cr_party_id = None
        self._cr_party_name = None
        self._customer_identifier = None
        self._deal_id = None
        self._declined_reason = None
        self._distribution_list = None
        self._ec_estimate = None
        self._email_sent_flag = None
        self._email_sent_to_ssx_flag = None
        self._estimator_value = None
        self._failure_details = None
        self._gu_id = None
        self._inventory_name = None
        self._items_recommended = None
        self._low_volume_count = None
        self._offer_creator_coverage_report_url = None
        self._offer_creator_declined_reason = None
        self._offer_creator_email = None
        self._offer_creator_notes = None
        self._offer_creator_offer_created = None
        self._offer_creator_readout_dt = None
        self._offer_creator_readout_status = None
        self._modified_by = None
        self._modified_dtm = None
        self._next_steps = None
        self._oa_package_type = None
        self._oppty_id = None
        self._oppty_name = None
        self._op_url = None
        self._partner_name = None
        self._partner_approved_entitlements = None
        self._partner_requested_entitlements = None
        self._readout_delivery_status = None
        self._readout_done_dt = None
        self._report_exist_flag = None
        self._request_created_by = None
        self._report_type = None
        self._requested_dtm = None
        self._requester_comments = None
        self._requester_function = None
        self._requester_name = None
        self._request_type = None
        self._risk_score = None
        self._rr_internal = None
        self._sales_cx_team = None
        self._sales_level1 = None
        self._sales_level2 = None
        self._sales_level3 = None
        self._sales_level4 = None
        self._sales_level5 = None
        self._sales_level6 = None
        self._sav_id = None
        self._sntc_estimate = None
        self._sspt_estimate = None
        self._ssp = None
        self._status = None
        self._st_estimate = None
        self._tableau_project_name = None
        self._targeted_fiscal_month = None
        self._target_request_id = None
        self._target_request_type = None
        self._written_loa_url = None
        self.discriminator = None
        if request_id is not None:
            self.request_id = request_id
        if account_name is not None:
            self.account_name = account_name
        if advisor_assigned is not None:
            self.advisor_assigned = advisor_assigned
        if advisor_notes is not None:
            self.advisor_notes = advisor_notes
        if appliance_id is not None:
            self.appliance_id = appliance_id
        if bcs_estimate is not None:
            self.bcs_estimate = bcs_estimate
        if be_geo_id is not None:
            self.be_geo_id = be_geo_id
        if campaign_name is not None:
            self.campaign_name = campaign_name
        if cav_id is not None:
            self.cav_id = cav_id
        if compass_ppt_url is not None:
            self.compass_ppt_url = compass_ppt_url
        if compass_url is not None:
            self.compass_url = compass_url
        if completed_dtm is not None:
            self.completed_dtm = completed_dtm
        if concierge_account_team_notes is not None:
            self.concierge_account_team_notes = concierge_account_team_notes
        if concierge_advisor_assigned is not None:
            self.concierge_advisor_assigned = concierge_advisor_assigned
        if concierge_business_objective is not None:
            self.concierge_business_objective = concierge_business_objective
        if concierge_external_readout_dt is not None:
            self.concierge_external_readout_dt = concierge_external_readout_dt
        if concierge_external_readout_result is not None:
            self.concierge_external_readout_result = concierge_external_readout_result
        if concierge_internal_readout_dt is not None:
            self.concierge_internal_readout_dt = concierge_internal_readout_dt
        if concierge_internal_result is not None:
            self.concierge_internal_result = concierge_internal_result
        if concierge_requested_flag is not None:
            self.concierge_requested_flag = concierge_requested_flag
        if contract_number is not None:
            self.contract_number = contract_number
        if coverage_report_requested_flag is not None:
            self.coverage_report_requested_flag = coverage_report_requested_flag
        if cr_party_id is not None:
            self.cr_party_id = cr_party_id
        if cr_party_name is not None:
            self.cr_party_name = cr_party_name
        if customer_identifier is not None:
            self.customer_identifier = customer_identifier
        if deal_id is not None:
            self.deal_id = deal_id
        if declined_reason is not None:
            self.declined_reason = declined_reason
        if distribution_list is not None:
            self.distribution_list = distribution_list
        if ec_estimate is not None:
            self.ec_estimate = ec_estimate
        if email_sent_flag is not None:
            self.email_sent_flag = email_sent_flag
        if email_sent_to_ssx_flag is not None:
            self.email_sent_to_ssx_flag = email_sent_to_ssx_flag
        if estimator_value is not None:
            self.estimator_value = estimator_value
        if failure_details is not None:
            self.failure_details = failure_details
        if gu_id is not None:
            self.gu_id = gu_id
        if inventory_name is not None:
            self.inventory_name = inventory_name
        if items_recommended is not None:
            self.items_recommended = items_recommended
        if low_volume_count is not None:
            self.low_volume_count = low_volume_count
        if offer_creator_coverage_report_url is not None:
            self.offer_creator_coverage_report_url = offer_creator_coverage_report_url
        if offer_creator_declined_reason is not None:
            self.offer_creator_declined_reason = offer_creator_declined_reason
        if offer_creator_email is not None:
            self.offer_creator_email = offer_creator_email
        if offer_creator_notes is not None:
            self.offer_creator_notes = offer_creator_notes
        if offer_creator_offer_created is not None:
            self.offer_creator_offer_created = offer_creator_offer_created
        if offer_creator_readout_dt is not None:
            self.offer_creator_readout_dt = offer_creator_readout_dt
        if offer_creator_readout_status is not None:
            self.offer_creator_readout_status = offer_creator_readout_status
        if modified_by is not None:
            self.modified_by = modified_by
        if modified_dtm is not None:
            self.modified_dtm = modified_dtm
        if next_steps is not None:
            self.next_steps = next_steps
        if oa_package_type is not None:
            self.oa_package_type = oa_package_type
        if oppty_id is not None:
            self.oppty_id = oppty_id
        if oppty_name is not None:
            self.oppty_name = oppty_name
        if op_url is not None:
            self.op_url = op_url
        if partner_name is not None:
            self.partner_name = partner_name
        if partner_approved_entitlements is not None:
            self.partner_approved_entitlements = partner_approved_entitlements
        if partner_requested_entitlements is not None:
            self.partner_requested_entitlements = partner_requested_entitlements
        if readout_delivery_status is not None:
            self.readout_delivery_status = readout_delivery_status
        if readout_done_dt is not None:
            self.readout_done_dt = readout_done_dt
        if report_exist_flag is not None:
            self.report_exist_flag = report_exist_flag
        if request_created_by is not None:
            self.request_created_by = request_created_by
        if report_type is not None:
            self.report_type = report_type
        if requested_dtm is not None:
            self.requested_dtm = requested_dtm
        if requester_comments is not None:
            self.requester_comments = requester_comments
        if requester_function is not None:
            self.requester_function = requester_function
        if requester_name is not None:
            self.requester_name = requester_name
        if request_type is not None:
            self.request_type = request_type
        if risk_score is not None:
            self.risk_score = risk_score
        if rr_internal is not None:
            self.rr_internal = rr_internal
        if sales_cx_team is not None:
            self.sales_cx_team = sales_cx_team
        if sales_level1 is not None:
            self.sales_level1 = sales_level1
        if sales_level2 is not None:
            self.sales_level2 = sales_level2
        if sales_level3 is not None:
            self.sales_level3 = sales_level3
        if sales_level4 is not None:
            self.sales_level4 = sales_level4
        if sales_level5 is not None:
            self.sales_level5 = sales_level5
        if sales_level6 is not None:
            self.sales_level6 = sales_level6
        if sav_id is not None:
            self.sav_id = sav_id
        if sntc_estimate is not None:
            self.sntc_estimate = sntc_estimate
        if sspt_estimate is not None:
            self.sspt_estimate = sspt_estimate
        if ssp is not None:
            self.ssp = ssp
        if status is not None:
            self.status = status
        if st_estimate is not None:
            self.st_estimate = st_estimate
        if tableau_project_name is not None:
            self.tableau_project_name = tableau_project_name
        if targeted_fiscal_month is not None:
            self.targeted_fiscal_month = targeted_fiscal_month
        if target_request_id is not None:
            self.target_request_id = target_request_id
        if target_request_type is not None:
            self.target_request_type = target_request_type
        if written_loa_url is not None:
            self.written_loa_url = written_loa_url

    @property
    def request_id(self):
        """Gets the request_id of this Request.  # noqa: E501


        :return: The request_id of this Request.  # noqa: E501
        :rtype: RequestIdSchema
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this Request.


        :param request_id: The request_id of this Request.  # noqa: E501
        :type: RequestIdSchema
        """

        self._request_id = request_id

    @property
    def account_name(self):
        """Gets the account_name of this Request.  # noqa: E501


        :return: The account_name of this Request.  # noqa: E501
        :rtype: AccountNameSchema
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this Request.


        :param account_name: The account_name of this Request.  # noqa: E501
        :type: AccountNameSchema
        """

        self._account_name = account_name

    @property
    def advisor_assigned(self):
        """Gets the advisor_assigned of this Request.  # noqa: E501


        :return: The advisor_assigned of this Request.  # noqa: E501
        :rtype: AdvisorAssignedSchema
        """
        return self._advisor_assigned

    @advisor_assigned.setter
    def advisor_assigned(self, advisor_assigned):
        """Sets the advisor_assigned of this Request.


        :param advisor_assigned: The advisor_assigned of this Request.  # noqa: E501
        :type: AdvisorAssignedSchema
        """

        self._advisor_assigned = advisor_assigned

    @property
    def advisor_notes(self):
        """Gets the advisor_notes of this Request.  # noqa: E501


        :return: The advisor_notes of this Request.  # noqa: E501
        :rtype: AdvisorNotesSchema
        """
        return self._advisor_notes

    @advisor_notes.setter
    def advisor_notes(self, advisor_notes):
        """Sets the advisor_notes of this Request.


        :param advisor_notes: The advisor_notes of this Request.  # noqa: E501
        :type: AdvisorNotesSchema
        """

        self._advisor_notes = advisor_notes

    @property
    def appliance_id(self):
        """Gets the appliance_id of this Request.  # noqa: E501


        :return: The appliance_id of this Request.  # noqa: E501
        :rtype: ApplianceIdSchema
        """
        return self._appliance_id

    @appliance_id.setter
    def appliance_id(self, appliance_id):
        """Sets the appliance_id of this Request.


        :param appliance_id: The appliance_id of this Request.  # noqa: E501
        :type: ApplianceIdSchema
        """

        self._appliance_id = appliance_id

    @property
    def bcs_estimate(self):
        """Gets the bcs_estimate of this Request.  # noqa: E501


        :return: The bcs_estimate of this Request.  # noqa: E501
        :rtype: BcsEstimateSchema
        """
        return self._bcs_estimate

    @bcs_estimate.setter
    def bcs_estimate(self, bcs_estimate):
        """Sets the bcs_estimate of this Request.


        :param bcs_estimate: The bcs_estimate of this Request.  # noqa: E501
        :type: BcsEstimateSchema
        """

        self._bcs_estimate = bcs_estimate

    @property
    def be_geo_id(self):
        """Gets the be_geo_id of this Request.  # noqa: E501


        :return: The be_geo_id of this Request.  # noqa: E501
        :rtype: BeGeoIdSchema
        """
        return self._be_geo_id

    @be_geo_id.setter
    def be_geo_id(self, be_geo_id):
        """Sets the be_geo_id of this Request.


        :param be_geo_id: The be_geo_id of this Request.  # noqa: E501
        :type: BeGeoIdSchema
        """

        self._be_geo_id = be_geo_id

    @property
    def campaign_name(self):
        """Gets the campaign_name of this Request.  # noqa: E501


        :return: The campaign_name of this Request.  # noqa: E501
        :rtype: CampaignNameSchema
        """
        return self._campaign_name

    @campaign_name.setter
    def campaign_name(self, campaign_name):
        """Sets the campaign_name of this Request.


        :param campaign_name: The campaign_name of this Request.  # noqa: E501
        :type: CampaignNameSchema
        """

        self._campaign_name = campaign_name

    @property
    def cav_id(self):
        """Gets the cav_id of this Request.  # noqa: E501


        :return: The cav_id of this Request.  # noqa: E501
        :rtype: CavIdSchema
        """
        return self._cav_id

    @cav_id.setter
    def cav_id(self, cav_id):
        """Sets the cav_id of this Request.


        :param cav_id: The cav_id of this Request.  # noqa: E501
        :type: CavIdSchema
        """

        self._cav_id = cav_id

    @property
    def compass_ppt_url(self):
        """Gets the compass_ppt_url of this Request.  # noqa: E501


        :return: The compass_ppt_url of this Request.  # noqa: E501
        :rtype: CompassPptUrlSchema
        """
        return self._compass_ppt_url

    @compass_ppt_url.setter
    def compass_ppt_url(self, compass_ppt_url):
        """Sets the compass_ppt_url of this Request.


        :param compass_ppt_url: The compass_ppt_url of this Request.  # noqa: E501
        :type: CompassPptUrlSchema
        """

        self._compass_ppt_url = compass_ppt_url

    @property
    def compass_url(self):
        """Gets the compass_url of this Request.  # noqa: E501


        :return: The compass_url of this Request.  # noqa: E501
        :rtype: CompassUrlSchema
        """
        return self._compass_url

    @compass_url.setter
    def compass_url(self, compass_url):
        """Sets the compass_url of this Request.


        :param compass_url: The compass_url of this Request.  # noqa: E501
        :type: CompassUrlSchema
        """

        self._compass_url = compass_url

    @property
    def completed_dtm(self):
        """Gets the completed_dtm of this Request.  # noqa: E501


        :return: The completed_dtm of this Request.  # noqa: E501
        :rtype: CompletedDtmSchema
        """
        return self._completed_dtm

    @completed_dtm.setter
    def completed_dtm(self, completed_dtm):
        """Sets the completed_dtm of this Request.


        :param completed_dtm: The completed_dtm of this Request.  # noqa: E501
        :type: CompletedDtmSchema
        """

        self._completed_dtm = completed_dtm

    @property
    def concierge_account_team_notes(self):
        """Gets the concierge_account_team_notes of this Request.  # noqa: E501


        :return: The concierge_account_team_notes of this Request.  # noqa: E501
        :rtype: ConciergeAccountTeamNotesSchema
        """
        return self._concierge_account_team_notes

    @concierge_account_team_notes.setter
    def concierge_account_team_notes(self, concierge_account_team_notes):
        """Sets the concierge_account_team_notes of this Request.


        :param concierge_account_team_notes: The concierge_account_team_notes of this Request.  # noqa: E501
        :type: ConciergeAccountTeamNotesSchema
        """

        self._concierge_account_team_notes = concierge_account_team_notes

    @property
    def concierge_advisor_assigned(self):
        """Gets the concierge_advisor_assigned of this Request.  # noqa: E501


        :return: The concierge_advisor_assigned of this Request.  # noqa: E501
        :rtype: ConciergeAdvisorAssignedSchema
        """
        return self._concierge_advisor_assigned

    @concierge_advisor_assigned.setter
    def concierge_advisor_assigned(self, concierge_advisor_assigned):
        """Sets the concierge_advisor_assigned of this Request.


        :param concierge_advisor_assigned: The concierge_advisor_assigned of this Request.  # noqa: E501
        :type: ConciergeAdvisorAssignedSchema
        """

        self._concierge_advisor_assigned = concierge_advisor_assigned

    @property
    def concierge_business_objective(self):
        """Gets the concierge_business_objective of this Request.  # noqa: E501


        :return: The concierge_business_objective of this Request.  # noqa: E501
        :rtype: ConciergeBusinessObjectiveSchema
        """
        return self._concierge_business_objective

    @concierge_business_objective.setter
    def concierge_business_objective(self, concierge_business_objective):
        """Sets the concierge_business_objective of this Request.


        :param concierge_business_objective: The concierge_business_objective of this Request.  # noqa: E501
        :type: ConciergeBusinessObjectiveSchema
        """

        self._concierge_business_objective = concierge_business_objective

    @property
    def concierge_external_readout_dt(self):
        """Gets the concierge_external_readout_dt of this Request.  # noqa: E501


        :return: The concierge_external_readout_dt of this Request.  # noqa: E501
        :rtype: ConciergeExternalReadoutDtSchema
        """
        return self._concierge_external_readout_dt

    @concierge_external_readout_dt.setter
    def concierge_external_readout_dt(self, concierge_external_readout_dt):
        """Sets the concierge_external_readout_dt of this Request.


        :param concierge_external_readout_dt: The concierge_external_readout_dt of this Request.  # noqa: E501
        :type: ConciergeExternalReadoutDtSchema
        """

        self._concierge_external_readout_dt = concierge_external_readout_dt

    @property
    def concierge_external_readout_result(self):
        """Gets the concierge_external_readout_result of this Request.  # noqa: E501


        :return: The concierge_external_readout_result of this Request.  # noqa: E501
        :rtype: ConciergeExternalReadoutResultSchema
        """
        return self._concierge_external_readout_result

    @concierge_external_readout_result.setter
    def concierge_external_readout_result(self, concierge_external_readout_result):
        """Sets the concierge_external_readout_result of this Request.


        :param concierge_external_readout_result: The concierge_external_readout_result of this Request.  # noqa: E501
        :type: ConciergeExternalReadoutResultSchema
        """

        self._concierge_external_readout_result = concierge_external_readout_result

    @property
    def concierge_internal_readout_dt(self):
        """Gets the concierge_internal_readout_dt of this Request.  # noqa: E501


        :return: The concierge_internal_readout_dt of this Request.  # noqa: E501
        :rtype: ConciergeInternalReadoutDtSchema
        """
        return self._concierge_internal_readout_dt

    @concierge_internal_readout_dt.setter
    def concierge_internal_readout_dt(self, concierge_internal_readout_dt):
        """Sets the concierge_internal_readout_dt of this Request.


        :param concierge_internal_readout_dt: The concierge_internal_readout_dt of this Request.  # noqa: E501
        :type: ConciergeInternalReadoutDtSchema
        """

        self._concierge_internal_readout_dt = concierge_internal_readout_dt

    @property
    def concierge_internal_result(self):
        """Gets the concierge_internal_result of this Request.  # noqa: E501


        :return: The concierge_internal_result of this Request.  # noqa: E501
        :rtype: ConciergeInternalResultSchema
        """
        return self._concierge_internal_result

    @concierge_internal_result.setter
    def concierge_internal_result(self, concierge_internal_result):
        """Sets the concierge_internal_result of this Request.


        :param concierge_internal_result: The concierge_internal_result of this Request.  # noqa: E501
        :type: ConciergeInternalResultSchema
        """

        self._concierge_internal_result = concierge_internal_result

    @property
    def concierge_requested_flag(self):
        """Gets the concierge_requested_flag of this Request.  # noqa: E501


        :return: The concierge_requested_flag of this Request.  # noqa: E501
        :rtype: ConciergeRequestedFlagSchema
        """
        return self._concierge_requested_flag

    @concierge_requested_flag.setter
    def concierge_requested_flag(self, concierge_requested_flag):
        """Sets the concierge_requested_flag of this Request.


        :param concierge_requested_flag: The concierge_requested_flag of this Request.  # noqa: E501
        :type: ConciergeRequestedFlagSchema
        """

        self._concierge_requested_flag = concierge_requested_flag

    @property
    def contract_number(self):
        """Gets the contract_number of this Request.  # noqa: E501


        :return: The contract_number of this Request.  # noqa: E501
        :rtype: ContractNumberSchema
        """
        return self._contract_number

    @contract_number.setter
    def contract_number(self, contract_number):
        """Sets the contract_number of this Request.


        :param contract_number: The contract_number of this Request.  # noqa: E501
        :type: ContractNumberSchema
        """

        self._contract_number = contract_number

    @property
    def coverage_report_requested_flag(self):
        """Gets the coverage_report_requested_flag of this Request.  # noqa: E501


        :return: The coverage_report_requested_flag of this Request.  # noqa: E501
        :rtype: CoverageReportRequestedFlagSchema
        """
        return self._coverage_report_requested_flag

    @coverage_report_requested_flag.setter
    def coverage_report_requested_flag(self, coverage_report_requested_flag):
        """Sets the coverage_report_requested_flag of this Request.


        :param coverage_report_requested_flag: The coverage_report_requested_flag of this Request.  # noqa: E501
        :type: CoverageReportRequestedFlagSchema
        """

        self._coverage_report_requested_flag = coverage_report_requested_flag

    @property
    def cr_party_id(self):
        """Gets the cr_party_id of this Request.  # noqa: E501


        :return: The cr_party_id of this Request.  # noqa: E501
        :rtype: CrPartyIdSchema
        """
        return self._cr_party_id

    @cr_party_id.setter
    def cr_party_id(self, cr_party_id):
        """Sets the cr_party_id of this Request.


        :param cr_party_id: The cr_party_id of this Request.  # noqa: E501
        :type: CrPartyIdSchema
        """

        self._cr_party_id = cr_party_id

    @property
    def cr_party_name(self):
        """Gets the cr_party_name of this Request.  # noqa: E501


        :return: The cr_party_name of this Request.  # noqa: E501
        :rtype: CrPartyNameSchema
        """
        return self._cr_party_name

    @cr_party_name.setter
    def cr_party_name(self, cr_party_name):
        """Sets the cr_party_name of this Request.


        :param cr_party_name: The cr_party_name of this Request.  # noqa: E501
        :type: CrPartyNameSchema
        """

        self._cr_party_name = cr_party_name

    @property
    def customer_identifier(self):
        """Gets the customer_identifier of this Request.  # noqa: E501


        :return: The customer_identifier of this Request.  # noqa: E501
        :rtype: CustomerIdentifierSchema
        """
        return self._customer_identifier

    @customer_identifier.setter
    def customer_identifier(self, customer_identifier):
        """Sets the customer_identifier of this Request.


        :param customer_identifier: The customer_identifier of this Request.  # noqa: E501
        :type: CustomerIdentifierSchema
        """

        self._customer_identifier = customer_identifier

    @property
    def deal_id(self):
        """Gets the deal_id of this Request.  # noqa: E501


        :return: The deal_id of this Request.  # noqa: E501
        :rtype: DealIdSchema
        """
        return self._deal_id

    @deal_id.setter
    def deal_id(self, deal_id):
        """Sets the deal_id of this Request.


        :param deal_id: The deal_id of this Request.  # noqa: E501
        :type: DealIdSchema
        """

        self._deal_id = deal_id

    @property
    def declined_reason(self):
        """Gets the declined_reason of this Request.  # noqa: E501


        :return: The declined_reason of this Request.  # noqa: E501
        :rtype: DeclinedReasonSchema
        """
        return self._declined_reason

    @declined_reason.setter
    def declined_reason(self, declined_reason):
        """Sets the declined_reason of this Request.


        :param declined_reason: The declined_reason of this Request.  # noqa: E501
        :type: DeclinedReasonSchema
        """

        self._declined_reason = declined_reason

    @property
    def distribution_list(self):
        """Gets the distribution_list of this Request.  # noqa: E501


        :return: The distribution_list of this Request.  # noqa: E501
        :rtype: DistributionListSchema
        """
        return self._distribution_list

    @distribution_list.setter
    def distribution_list(self, distribution_list):
        """Sets the distribution_list of this Request.


        :param distribution_list: The distribution_list of this Request.  # noqa: E501
        :type: DistributionListSchema
        """

        self._distribution_list = distribution_list

    @property
    def ec_estimate(self):
        """Gets the ec_estimate of this Request.  # noqa: E501


        :return: The ec_estimate of this Request.  # noqa: E501
        :rtype: EcEstimateSchema
        """
        return self._ec_estimate

    @ec_estimate.setter
    def ec_estimate(self, ec_estimate):
        """Sets the ec_estimate of this Request.


        :param ec_estimate: The ec_estimate of this Request.  # noqa: E501
        :type: EcEstimateSchema
        """

        self._ec_estimate = ec_estimate

    @property
    def email_sent_flag(self):
        """Gets the email_sent_flag of this Request.  # noqa: E501


        :return: The email_sent_flag of this Request.  # noqa: E501
        :rtype: EmailSentFlagSchema
        """
        return self._email_sent_flag

    @email_sent_flag.setter
    def email_sent_flag(self, email_sent_flag):
        """Sets the email_sent_flag of this Request.


        :param email_sent_flag: The email_sent_flag of this Request.  # noqa: E501
        :type: EmailSentFlagSchema
        """

        self._email_sent_flag = email_sent_flag

    @property
    def email_sent_to_ssx_flag(self):
        """Gets the email_sent_to_ssx_flag of this Request.  # noqa: E501


        :return: The email_sent_to_ssx_flag of this Request.  # noqa: E501
        :rtype: EmailSentToSsxFlagSchema
        """
        return self._email_sent_to_ssx_flag

    @email_sent_to_ssx_flag.setter
    def email_sent_to_ssx_flag(self, email_sent_to_ssx_flag):
        """Sets the email_sent_to_ssx_flag of this Request.


        :param email_sent_to_ssx_flag: The email_sent_to_ssx_flag of this Request.  # noqa: E501
        :type: EmailSentToSsxFlagSchema
        """

        self._email_sent_to_ssx_flag = email_sent_to_ssx_flag

    @property
    def estimator_value(self):
        """Gets the estimator_value of this Request.  # noqa: E501


        :return: The estimator_value of this Request.  # noqa: E501
        :rtype: EstimatorValueSchema
        """
        return self._estimator_value

    @estimator_value.setter
    def estimator_value(self, estimator_value):
        """Sets the estimator_value of this Request.


        :param estimator_value: The estimator_value of this Request.  # noqa: E501
        :type: EstimatorValueSchema
        """

        self._estimator_value = estimator_value

    @property
    def failure_details(self):
        """Gets the failure_details of this Request.  # noqa: E501


        :return: The failure_details of this Request.  # noqa: E501
        :rtype: FailureDetailsSchema
        """
        return self._failure_details

    @failure_details.setter
    def failure_details(self, failure_details):
        """Sets the failure_details of this Request.


        :param failure_details: The failure_details of this Request.  # noqa: E501
        :type: FailureDetailsSchema
        """

        self._failure_details = failure_details

    @property
    def gu_id(self):
        """Gets the gu_id of this Request.  # noqa: E501


        :return: The gu_id of this Request.  # noqa: E501
        :rtype: GuIdSchema
        """
        return self._gu_id

    @gu_id.setter
    def gu_id(self, gu_id):
        """Sets the gu_id of this Request.


        :param gu_id: The gu_id of this Request.  # noqa: E501
        :type: GuIdSchema
        """

        self._gu_id = gu_id

    @property
    def inventory_name(self):
        """Gets the inventory_name of this Request.  # noqa: E501


        :return: The inventory_name of this Request.  # noqa: E501
        :rtype: InventoryNameSchema
        """
        return self._inventory_name

    @inventory_name.setter
    def inventory_name(self, inventory_name):
        """Sets the inventory_name of this Request.


        :param inventory_name: The inventory_name of this Request.  # noqa: E501
        :type: InventoryNameSchema
        """

        self._inventory_name = inventory_name

    @property
    def items_recommended(self):
        """Gets the items_recommended of this Request.  # noqa: E501


        :return: The items_recommended of this Request.  # noqa: E501
        :rtype: ItemsRecommendedSchema
        """
        return self._items_recommended

    @items_recommended.setter
    def items_recommended(self, items_recommended):
        """Sets the items_recommended of this Request.


        :param items_recommended: The items_recommended of this Request.  # noqa: E501
        :type: ItemsRecommendedSchema
        """

        self._items_recommended = items_recommended

    @property
    def low_volume_count(self):
        """Gets the low_volume_count of this Request.  # noqa: E501


        :return: The low_volume_count of this Request.  # noqa: E501
        :rtype: LowVolumeCountSchema
        """
        return self._low_volume_count

    @low_volume_count.setter
    def low_volume_count(self, low_volume_count):
        """Sets the low_volume_count of this Request.


        :param low_volume_count: The low_volume_count of this Request.  # noqa: E501
        :type: LowVolumeCountSchema
        """

        self._low_volume_count = low_volume_count

    @property
    def offer_creator_coverage_report_url(self):
        """Gets the offer_creator_coverage_report_url of this Request.  # noqa: E501


        :return: The offer_creator_coverage_report_url of this Request.  # noqa: E501
        :rtype: OfferCreatorCoverageReportUrlSchema
        """
        return self._offer_creator_coverage_report_url

    @offer_creator_coverage_report_url.setter
    def offer_creator_coverage_report_url(self, offer_creator_coverage_report_url):
        """Sets the offer_creator_coverage_report_url of this Request.


        :param offer_creator_coverage_report_url: The offer_creator_coverage_report_url of this Request.  # noqa: E501
        :type: OfferCreatorCoverageReportUrlSchema
        """

        self._offer_creator_coverage_report_url = offer_creator_coverage_report_url

    @property
    def offer_creator_declined_reason(self):
        """Gets the offer_creator_declined_reason of this Request.  # noqa: E501


        :return: The offer_creator_declined_reason of this Request.  # noqa: E501
        :rtype: OfferCreatorDeclinedReasonSchema
        """
        return self._offer_creator_declined_reason

    @offer_creator_declined_reason.setter
    def offer_creator_declined_reason(self, offer_creator_declined_reason):
        """Sets the offer_creator_declined_reason of this Request.


        :param offer_creator_declined_reason: The offer_creator_declined_reason of this Request.  # noqa: E501
        :type: OfferCreatorDeclinedReasonSchema
        """

        self._offer_creator_declined_reason = offer_creator_declined_reason

    @property
    def offer_creator_email(self):
        """Gets the offer_creator_email of this Request.  # noqa: E501


        :return: The offer_creator_email of this Request.  # noqa: E501
        :rtype: OfferCreatorEmailSchema
        """
        return self._offer_creator_email

    @offer_creator_email.setter
    def offer_creator_email(self, offer_creator_email):
        """Sets the offer_creator_email of this Request.


        :param offer_creator_email: The offer_creator_email of this Request.  # noqa: E501
        :type: OfferCreatorEmailSchema
        """

        self._offer_creator_email = offer_creator_email

    @property
    def offer_creator_notes(self):
        """Gets the offer_creator_notes of this Request.  # noqa: E501


        :return: The offer_creator_notes of this Request.  # noqa: E501
        :rtype: OfferCreatorNotesSchema
        """
        return self._offer_creator_notes

    @offer_creator_notes.setter
    def offer_creator_notes(self, offer_creator_notes):
        """Sets the offer_creator_notes of this Request.


        :param offer_creator_notes: The offer_creator_notes of this Request.  # noqa: E501
        :type: OfferCreatorNotesSchema
        """

        self._offer_creator_notes = offer_creator_notes

    @property
    def offer_creator_offer_created(self):
        """Gets the offer_creator_offer_created of this Request.  # noqa: E501


        :return: The offer_creator_offer_created of this Request.  # noqa: E501
        :rtype: OfferCreatorOfferCreatedSchema
        """
        return self._offer_creator_offer_created

    @offer_creator_offer_created.setter
    def offer_creator_offer_created(self, offer_creator_offer_created):
        """Sets the offer_creator_offer_created of this Request.


        :param offer_creator_offer_created: The offer_creator_offer_created of this Request.  # noqa: E501
        :type: OfferCreatorOfferCreatedSchema
        """

        self._offer_creator_offer_created = offer_creator_offer_created

    @property
    def offer_creator_readout_dt(self):
        """Gets the offer_creator_readout_dt of this Request.  # noqa: E501


        :return: The offer_creator_readout_dt of this Request.  # noqa: E501
        :rtype: OfferCreatorReadoutDtSchema
        """
        return self._offer_creator_readout_dt

    @offer_creator_readout_dt.setter
    def offer_creator_readout_dt(self, offer_creator_readout_dt):
        """Sets the offer_creator_readout_dt of this Request.


        :param offer_creator_readout_dt: The offer_creator_readout_dt of this Request.  # noqa: E501
        :type: OfferCreatorReadoutDtSchema
        """

        self._offer_creator_readout_dt = offer_creator_readout_dt

    @property
    def offer_creator_readout_status(self):
        """Gets the offer_creator_readout_status of this Request.  # noqa: E501


        :return: The offer_creator_readout_status of this Request.  # noqa: E501
        :rtype: OfferCreatorReadoutStatusSchema
        """
        return self._offer_creator_readout_status

    @offer_creator_readout_status.setter
    def offer_creator_readout_status(self, offer_creator_readout_status):
        """Sets the offer_creator_readout_status of this Request.


        :param offer_creator_readout_status: The offer_creator_readout_status of this Request.  # noqa: E501
        :type: OfferCreatorReadoutStatusSchema
        """

        self._offer_creator_readout_status = offer_creator_readout_status

    @property
    def modified_by(self):
        """Gets the modified_by of this Request.  # noqa: E501


        :return: The modified_by of this Request.  # noqa: E501
        :rtype: ModifiedBySchema
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this Request.


        :param modified_by: The modified_by of this Request.  # noqa: E501
        :type: ModifiedBySchema
        """

        self._modified_by = modified_by

    @property
    def modified_dtm(self):
        """Gets the modified_dtm of this Request.  # noqa: E501


        :return: The modified_dtm of this Request.  # noqa: E501
        :rtype: ModifiedDtmSchema
        """
        return self._modified_dtm

    @modified_dtm.setter
    def modified_dtm(self, modified_dtm):
        """Sets the modified_dtm of this Request.


        :param modified_dtm: The modified_dtm of this Request.  # noqa: E501
        :type: ModifiedDtmSchema
        """

        self._modified_dtm = modified_dtm

    @property
    def next_steps(self):
        """Gets the next_steps of this Request.  # noqa: E501


        :return: The next_steps of this Request.  # noqa: E501
        :rtype: NextStepsSchema
        """
        return self._next_steps

    @next_steps.setter
    def next_steps(self, next_steps):
        """Sets the next_steps of this Request.


        :param next_steps: The next_steps of this Request.  # noqa: E501
        :type: NextStepsSchema
        """

        self._next_steps = next_steps

    @property
    def oa_package_type(self):
        """Gets the oa_package_type of this Request.  # noqa: E501


        :return: The oa_package_type of this Request.  # noqa: E501
        :rtype: OaPackageTypeSchema
        """
        return self._oa_package_type

    @oa_package_type.setter
    def oa_package_type(self, oa_package_type):
        """Sets the oa_package_type of this Request.


        :param oa_package_type: The oa_package_type of this Request.  # noqa: E501
        :type: OaPackageTypeSchema
        """

        self._oa_package_type = oa_package_type

    @property
    def oppty_id(self):
        """Gets the oppty_id of this Request.  # noqa: E501


        :return: The oppty_id of this Request.  # noqa: E501
        :rtype: OpptyIdSchema
        """
        return self._oppty_id

    @oppty_id.setter
    def oppty_id(self, oppty_id):
        """Sets the oppty_id of this Request.


        :param oppty_id: The oppty_id of this Request.  # noqa: E501
        :type: OpptyIdSchema
        """

        self._oppty_id = oppty_id

    @property
    def oppty_name(self):
        """Gets the oppty_name of this Request.  # noqa: E501


        :return: The oppty_name of this Request.  # noqa: E501
        :rtype: OpptyNameSchema
        """
        return self._oppty_name

    @oppty_name.setter
    def oppty_name(self, oppty_name):
        """Sets the oppty_name of this Request.


        :param oppty_name: The oppty_name of this Request.  # noqa: E501
        :type: OpptyNameSchema
        """

        self._oppty_name = oppty_name

    @property
    def op_url(self):
        """Gets the op_url of this Request.  # noqa: E501


        :return: The op_url of this Request.  # noqa: E501
        :rtype: OpUrlSchema
        """
        return self._op_url

    @op_url.setter
    def op_url(self, op_url):
        """Sets the op_url of this Request.


        :param op_url: The op_url of this Request.  # noqa: E501
        :type: OpUrlSchema
        """

        self._op_url = op_url

    @property
    def partner_name(self):
        """Gets the partner_name of this Request.  # noqa: E501


        :return: The partner_name of this Request.  # noqa: E501
        :rtype: PartnerNameSchema
        """
        return self._partner_name

    @partner_name.setter
    def partner_name(self, partner_name):
        """Sets the partner_name of this Request.


        :param partner_name: The partner_name of this Request.  # noqa: E501
        :type: PartnerNameSchema
        """

        self._partner_name = partner_name

    @property
    def partner_approved_entitlements(self):
        """Gets the partner_approved_entitlements of this Request.  # noqa: E501


        :return: The partner_approved_entitlements of this Request.  # noqa: E501
        :rtype: PartnerApprovedEntitlementsSchema
        """
        return self._partner_approved_entitlements

    @partner_approved_entitlements.setter
    def partner_approved_entitlements(self, partner_approved_entitlements):
        """Sets the partner_approved_entitlements of this Request.


        :param partner_approved_entitlements: The partner_approved_entitlements of this Request.  # noqa: E501
        :type: PartnerApprovedEntitlementsSchema
        """

        self._partner_approved_entitlements = partner_approved_entitlements

    @property
    def partner_requested_entitlements(self):
        """Gets the partner_requested_entitlements of this Request.  # noqa: E501


        :return: The partner_requested_entitlements of this Request.  # noqa: E501
        :rtype: PartnerRequestedEntitlementsSchema
        """
        return self._partner_requested_entitlements

    @partner_requested_entitlements.setter
    def partner_requested_entitlements(self, partner_requested_entitlements):
        """Sets the partner_requested_entitlements of this Request.


        :param partner_requested_entitlements: The partner_requested_entitlements of this Request.  # noqa: E501
        :type: PartnerRequestedEntitlementsSchema
        """

        self._partner_requested_entitlements = partner_requested_entitlements

    @property
    def readout_delivery_status(self):
        """Gets the readout_delivery_status of this Request.  # noqa: E501


        :return: The readout_delivery_status of this Request.  # noqa: E501
        :rtype: ReadoutDeliveryStatusSchema
        """
        return self._readout_delivery_status

    @readout_delivery_status.setter
    def readout_delivery_status(self, readout_delivery_status):
        """Sets the readout_delivery_status of this Request.


        :param readout_delivery_status: The readout_delivery_status of this Request.  # noqa: E501
        :type: ReadoutDeliveryStatusSchema
        """

        self._readout_delivery_status = readout_delivery_status

    @property
    def readout_done_dt(self):
        """Gets the readout_done_dt of this Request.  # noqa: E501


        :return: The readout_done_dt of this Request.  # noqa: E501
        :rtype: ReadoutDoneDtSchema
        """
        return self._readout_done_dt

    @readout_done_dt.setter
    def readout_done_dt(self, readout_done_dt):
        """Sets the readout_done_dt of this Request.


        :param readout_done_dt: The readout_done_dt of this Request.  # noqa: E501
        :type: ReadoutDoneDtSchema
        """

        self._readout_done_dt = readout_done_dt

    @property
    def report_exist_flag(self):
        """Gets the report_exist_flag of this Request.  # noqa: E501


        :return: The report_exist_flag of this Request.  # noqa: E501
        :rtype: ReportExistFlagSchema
        """
        return self._report_exist_flag

    @report_exist_flag.setter
    def report_exist_flag(self, report_exist_flag):
        """Sets the report_exist_flag of this Request.


        :param report_exist_flag: The report_exist_flag of this Request.  # noqa: E501
        :type: ReportExistFlagSchema
        """

        self._report_exist_flag = report_exist_flag

    @property
    def request_created_by(self):
        """Gets the request_created_by of this Request.  # noqa: E501


        :return: The request_created_by of this Request.  # noqa: E501
        :rtype: RequestCreatedBySchema
        """
        return self._request_created_by

    @request_created_by.setter
    def request_created_by(self, request_created_by):
        """Sets the request_created_by of this Request.


        :param request_created_by: The request_created_by of this Request.  # noqa: E501
        :type: RequestCreatedBySchema
        """

        self._request_created_by = request_created_by

    @property
    def report_type(self):
        """Gets the report_type of this Request.  # noqa: E501


        :return: The report_type of this Request.  # noqa: E501
        :rtype: ReportTypeSchema
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this Request.


        :param report_type: The report_type of this Request.  # noqa: E501
        :type: ReportTypeSchema
        """

        self._report_type = report_type

    @property
    def requested_dtm(self):
        """Gets the requested_dtm of this Request.  # noqa: E501


        :return: The requested_dtm of this Request.  # noqa: E501
        :rtype: RequestedDtmSchema
        """
        return self._requested_dtm

    @requested_dtm.setter
    def requested_dtm(self, requested_dtm):
        """Sets the requested_dtm of this Request.


        :param requested_dtm: The requested_dtm of this Request.  # noqa: E501
        :type: RequestedDtmSchema
        """

        self._requested_dtm = requested_dtm

    @property
    def requester_comments(self):
        """Gets the requester_comments of this Request.  # noqa: E501


        :return: The requester_comments of this Request.  # noqa: E501
        :rtype: RequesterCommentsSchema
        """
        return self._requester_comments

    @requester_comments.setter
    def requester_comments(self, requester_comments):
        """Sets the requester_comments of this Request.


        :param requester_comments: The requester_comments of this Request.  # noqa: E501
        :type: RequesterCommentsSchema
        """

        self._requester_comments = requester_comments

    @property
    def requester_function(self):
        """Gets the requester_function of this Request.  # noqa: E501


        :return: The requester_function of this Request.  # noqa: E501
        :rtype: RequesterFunctionSchema
        """
        return self._requester_function

    @requester_function.setter
    def requester_function(self, requester_function):
        """Sets the requester_function of this Request.


        :param requester_function: The requester_function of this Request.  # noqa: E501
        :type: RequesterFunctionSchema
        """

        self._requester_function = requester_function

    @property
    def requester_name(self):
        """Gets the requester_name of this Request.  # noqa: E501


        :return: The requester_name of this Request.  # noqa: E501
        :rtype: RequesterNameSchema
        """
        return self._requester_name

    @requester_name.setter
    def requester_name(self, requester_name):
        """Sets the requester_name of this Request.


        :param requester_name: The requester_name of this Request.  # noqa: E501
        :type: RequesterNameSchema
        """

        self._requester_name = requester_name

    @property
    def request_type(self):
        """Gets the request_type of this Request.  # noqa: E501


        :return: The request_type of this Request.  # noqa: E501
        :rtype: RequestTypeSchema
        """
        return self._request_type

    @request_type.setter
    def request_type(self, request_type):
        """Sets the request_type of this Request.


        :param request_type: The request_type of this Request.  # noqa: E501
        :type: RequestTypeSchema
        """

        self._request_type = request_type

    @property
    def risk_score(self):
        """Gets the risk_score of this Request.  # noqa: E501


        :return: The risk_score of this Request.  # noqa: E501
        :rtype: RiskScoreSchema
        """
        return self._risk_score

    @risk_score.setter
    def risk_score(self, risk_score):
        """Sets the risk_score of this Request.


        :param risk_score: The risk_score of this Request.  # noqa: E501
        :type: RiskScoreSchema
        """

        self._risk_score = risk_score

    @property
    def rr_internal(self):
        """Gets the rr_internal of this Request.  # noqa: E501


        :return: The rr_internal of this Request.  # noqa: E501
        :rtype: RrInternalSchema
        """
        return self._rr_internal

    @rr_internal.setter
    def rr_internal(self, rr_internal):
        """Sets the rr_internal of this Request.


        :param rr_internal: The rr_internal of this Request.  # noqa: E501
        :type: RrInternalSchema
        """

        self._rr_internal = rr_internal

    @property
    def sales_cx_team(self):
        """Gets the sales_cx_team of this Request.  # noqa: E501


        :return: The sales_cx_team of this Request.  # noqa: E501
        :rtype: SalesCxTeamSchema
        """
        return self._sales_cx_team

    @sales_cx_team.setter
    def sales_cx_team(self, sales_cx_team):
        """Sets the sales_cx_team of this Request.


        :param sales_cx_team: The sales_cx_team of this Request.  # noqa: E501
        :type: SalesCxTeamSchema
        """

        self._sales_cx_team = sales_cx_team

    @property
    def sales_level1(self):
        """Gets the sales_level1 of this Request.  # noqa: E501


        :return: The sales_level1 of this Request.  # noqa: E501
        :rtype: SalesLevel1Schema
        """
        return self._sales_level1

    @sales_level1.setter
    def sales_level1(self, sales_level1):
        """Sets the sales_level1 of this Request.


        :param sales_level1: The sales_level1 of this Request.  # noqa: E501
        :type: SalesLevel1Schema
        """

        self._sales_level1 = sales_level1

    @property
    def sales_level2(self):
        """Gets the sales_level2 of this Request.  # noqa: E501


        :return: The sales_level2 of this Request.  # noqa: E501
        :rtype: SalesLevel2Schema
        """
        return self._sales_level2

    @sales_level2.setter
    def sales_level2(self, sales_level2):
        """Sets the sales_level2 of this Request.


        :param sales_level2: The sales_level2 of this Request.  # noqa: E501
        :type: SalesLevel2Schema
        """

        self._sales_level2 = sales_level2

    @property
    def sales_level3(self):
        """Gets the sales_level3 of this Request.  # noqa: E501


        :return: The sales_level3 of this Request.  # noqa: E501
        :rtype: SalesLevel3Schema
        """
        return self._sales_level3

    @sales_level3.setter
    def sales_level3(self, sales_level3):
        """Sets the sales_level3 of this Request.


        :param sales_level3: The sales_level3 of this Request.  # noqa: E501
        :type: SalesLevel3Schema
        """

        self._sales_level3 = sales_level3

    @property
    def sales_level4(self):
        """Gets the sales_level4 of this Request.  # noqa: E501


        :return: The sales_level4 of this Request.  # noqa: E501
        :rtype: SalesLevel4Schema
        """
        return self._sales_level4

    @sales_level4.setter
    def sales_level4(self, sales_level4):
        """Sets the sales_level4 of this Request.


        :param sales_level4: The sales_level4 of this Request.  # noqa: E501
        :type: SalesLevel4Schema
        """

        self._sales_level4 = sales_level4

    @property
    def sales_level5(self):
        """Gets the sales_level5 of this Request.  # noqa: E501


        :return: The sales_level5 of this Request.  # noqa: E501
        :rtype: SalesLevel5Schema
        """
        return self._sales_level5

    @sales_level5.setter
    def sales_level5(self, sales_level5):
        """Sets the sales_level5 of this Request.


        :param sales_level5: The sales_level5 of this Request.  # noqa: E501
        :type: SalesLevel5Schema
        """

        self._sales_level5 = sales_level5

    @property
    def sales_level6(self):
        """Gets the sales_level6 of this Request.  # noqa: E501


        :return: The sales_level6 of this Request.  # noqa: E501
        :rtype: SalesLevel6Schema
        """
        return self._sales_level6

    @sales_level6.setter
    def sales_level6(self, sales_level6):
        """Sets the sales_level6 of this Request.


        :param sales_level6: The sales_level6 of this Request.  # noqa: E501
        :type: SalesLevel6Schema
        """

        self._sales_level6 = sales_level6

    @property
    def sav_id(self):
        """Gets the sav_id of this Request.  # noqa: E501


        :return: The sav_id of this Request.  # noqa: E501
        :rtype: SavIdSchema
        """
        return self._sav_id

    @sav_id.setter
    def sav_id(self, sav_id):
        """Sets the sav_id of this Request.


        :param sav_id: The sav_id of this Request.  # noqa: E501
        :type: SavIdSchema
        """

        self._sav_id = sav_id

    @property
    def sntc_estimate(self):
        """Gets the sntc_estimate of this Request.  # noqa: E501


        :return: The sntc_estimate of this Request.  # noqa: E501
        :rtype: SntcEstimateSchema
        """
        return self._sntc_estimate

    @sntc_estimate.setter
    def sntc_estimate(self, sntc_estimate):
        """Sets the sntc_estimate of this Request.


        :param sntc_estimate: The sntc_estimate of this Request.  # noqa: E501
        :type: SntcEstimateSchema
        """

        self._sntc_estimate = sntc_estimate

    @property
    def sspt_estimate(self):
        """Gets the sspt_estimate of this Request.  # noqa: E501


        :return: The sspt_estimate of this Request.  # noqa: E501
        :rtype: SsptEstimateSchema
        """
        return self._sspt_estimate

    @sspt_estimate.setter
    def sspt_estimate(self, sspt_estimate):
        """Sets the sspt_estimate of this Request.


        :param sspt_estimate: The sspt_estimate of this Request.  # noqa: E501
        :type: SsptEstimateSchema
        """

        self._sspt_estimate = sspt_estimate

    @property
    def ssp(self):
        """Gets the ssp of this Request.  # noqa: E501


        :return: The ssp of this Request.  # noqa: E501
        :rtype: SspSchema
        """
        return self._ssp

    @ssp.setter
    def ssp(self, ssp):
        """Sets the ssp of this Request.


        :param ssp: The ssp of this Request.  # noqa: E501
        :type: SspSchema
        """

        self._ssp = ssp

    @property
    def status(self):
        """Gets the status of this Request.  # noqa: E501


        :return: The status of this Request.  # noqa: E501
        :rtype: StatusSchema
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Request.


        :param status: The status of this Request.  # noqa: E501
        :type: StatusSchema
        """

        self._status = status

    @property
    def st_estimate(self):
        """Gets the st_estimate of this Request.  # noqa: E501


        :return: The st_estimate of this Request.  # noqa: E501
        :rtype: StEstimateSchema
        """
        return self._st_estimate

    @st_estimate.setter
    def st_estimate(self, st_estimate):
        """Sets the st_estimate of this Request.


        :param st_estimate: The st_estimate of this Request.  # noqa: E501
        :type: StEstimateSchema
        """

        self._st_estimate = st_estimate

    @property
    def tableau_project_name(self):
        """Gets the tableau_project_name of this Request.  # noqa: E501


        :return: The tableau_project_name of this Request.  # noqa: E501
        :rtype: TableauProjectNameSchema
        """
        return self._tableau_project_name

    @tableau_project_name.setter
    def tableau_project_name(self, tableau_project_name):
        """Sets the tableau_project_name of this Request.


        :param tableau_project_name: The tableau_project_name of this Request.  # noqa: E501
        :type: TableauProjectNameSchema
        """

        self._tableau_project_name = tableau_project_name

    @property
    def targeted_fiscal_month(self):
        """Gets the targeted_fiscal_month of this Request.  # noqa: E501


        :return: The targeted_fiscal_month of this Request.  # noqa: E501
        :rtype: TargetedFiscalMonthSchema
        """
        return self._targeted_fiscal_month

    @targeted_fiscal_month.setter
    def targeted_fiscal_month(self, targeted_fiscal_month):
        """Sets the targeted_fiscal_month of this Request.


        :param targeted_fiscal_month: The targeted_fiscal_month of this Request.  # noqa: E501
        :type: TargetedFiscalMonthSchema
        """

        self._targeted_fiscal_month = targeted_fiscal_month

    @property
    def target_request_id(self):
        """Gets the target_request_id of this Request.  # noqa: E501


        :return: The target_request_id of this Request.  # noqa: E501
        :rtype: TargetRequestIdSchema
        """
        return self._target_request_id

    @target_request_id.setter
    def target_request_id(self, target_request_id):
        """Sets the target_request_id of this Request.


        :param target_request_id: The target_request_id of this Request.  # noqa: E501
        :type: TargetRequestIdSchema
        """

        self._target_request_id = target_request_id

    @property
    def target_request_type(self):
        """Gets the target_request_type of this Request.  # noqa: E501


        :return: The target_request_type of this Request.  # noqa: E501
        :rtype: TargetRequestTypeSchema
        """
        return self._target_request_type

    @target_request_type.setter
    def target_request_type(self, target_request_type):
        """Sets the target_request_type of this Request.


        :param target_request_type: The target_request_type of this Request.  # noqa: E501
        :type: TargetRequestTypeSchema
        """

        self._target_request_type = target_request_type

    @property
    def written_loa_url(self):
        """Gets the written_loa_url of this Request.  # noqa: E501


        :return: The written_loa_url of this Request.  # noqa: E501
        :rtype: WrittenLoaUrlForPatchSchema
        """
        return self._written_loa_url

    @written_loa_url.setter
    def written_loa_url(self, written_loa_url):
        """Sets the written_loa_url of this Request.


        :param written_loa_url: The written_loa_url of this Request.  # noqa: E501
        :type: WrittenLoaUrlForPatchSchema
        """

        self._written_loa_url = written_loa_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Request, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Request):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
