# coding: utf-8

"""
    Compass - Request Tracker

    API documentation for Compass - Request Tracker. This document contains a complete list of fields for a Compass request accessible to an admin. An authorized user may only read, write, and update certain fields or delete based on their role. All requests require a valid OAuth2 Bearer Token passed as a header that is associated with a Cisco CEC user account.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: compass-devcx@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AuditTrailApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_audit_trail(self, **kwargs):  # noqa: E501
        """Get all Transactions  # noqa: E501

        Get information about all Compass request transactions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_audit_trail(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sort: Field to sort results by, used in conjunction with `order`.
        :param str order: Order by ascending or descending, used in conjunction with `sort`.
        :param int max: The number of requests to return on a single call, used in conjunction with `offset`. Up to 1000 records can be retrieved in a single call.
        :param int offset: The row number after which the limited/fetched rows are returned, used in conjunction with `max`.
        :param str search: Search for audit trail records based on a search term. Must be at least three characters.
        :param str table_prefix: (development only) An optional identifier used to prefix snowflake tables.. These tables must be defined in the corresponding environment prior to use.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_audit_trail_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_audit_trail_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_audit_trail_with_http_info(self, **kwargs):  # noqa: E501
        """Get all Transactions  # noqa: E501

        Get information about all Compass request transactions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_audit_trail_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sort: Field to sort results by, used in conjunction with `order`.
        :param str order: Order by ascending or descending, used in conjunction with `sort`.
        :param int max: The number of requests to return on a single call, used in conjunction with `offset`. Up to 1000 records can be retrieved in a single call.
        :param int offset: The row number after which the limited/fetched rows are returned, used in conjunction with `max`.
        :param str search: Search for audit trail records based on a search term. Must be at least three characters.
        :param str table_prefix: (development only) An optional identifier used to prefix snowflake tables.. These tables must be defined in the corresponding environment prior to use.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'order', 'max', 'offset', 'search', 'table_prefix']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_audit_trail" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'max' in params:
            query_params.append(('max', params['max']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501

        header_params = {}
        if 'table_prefix' in params:
            header_params['Table-Prefix'] = params['table_prefix']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuthorization']  # noqa: E501

        return self.api_client.call_api(
            '/auditTrail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
