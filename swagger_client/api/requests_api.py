# coding: utf-8

"""
    Compass - Request Tracker

    API documentation for Compass - Request Tracker. This document contains a complete list of fields for a Compass request accessible to an admin. An authorized user may only read, write, and update certain fields or delete based on their role. All requests require a valid OAuth2 Bearer Token passed as a header that is associated with a Cisco CEC user account.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: compass-devcx@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class RequestsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def bulk_update_request(self, body, request_id, **kwargs):  # noqa: E501
        """Update multiple Requests  # noqa: E501

        An atomic operation consisting of one HTTP method, one URL, one set of HTTP request headers, applied uniformly across two or more resources of the same type and contained within the same resource collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_update_request(body, request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: A JSON object containing patch request information (required)
        :param str request_id: One or more comma separated request ids to update. A maximum of 500 records can be updated at one time. (required)
        :param str table_prefix: (development only) An optional identifier used to prefix snowflake tables.. These tables must be defined in the corresponding environment prior to use.
        :return: BulkPatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_update_request_with_http_info(body, request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_update_request_with_http_info(body, request_id, **kwargs)  # noqa: E501
            return data

    def bulk_update_request_with_http_info(self, body, request_id, **kwargs):  # noqa: E501
        """Update multiple Requests  # noqa: E501

        An atomic operation consisting of one HTTP method, one URL, one set of HTTP request headers, applied uniformly across two or more resources of the same type and contained within the same resource collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_update_request_with_http_info(body, request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: A JSON object containing patch request information (required)
        :param str request_id: One or more comma separated request ids to update. A maximum of 500 records can be updated at one time. (required)
        :param str table_prefix: (development only) An optional identifier used to prefix snowflake tables.. These tables must be defined in the corresponding environment prior to use.
        :return: BulkPatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'request_id', 'table_prefix']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_update_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `bulk_update_request`")  # noqa: E501
        # verify the required parameter 'request_id' is set
        if ('request_id' not in params or
                params['request_id'] is None):
            raise ValueError("Missing the required parameter `request_id` when calling `bulk_update_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'request_id' in params:
            query_params.append(('requestId', params['request_id']))  # noqa: E501

        header_params = {}
        if 'table_prefix' in params:
            header_params['Table-Prefix'] = params['table_prefix']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuthorization']  # noqa: E501

        return self.api_client.call_api(
            '/requests/bulk', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkPatchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_request(self, body, **kwargs):  # noqa: E501
        """Create a Request  # noqa: E501

        Create a new request for a Compass report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_request(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: A JSON object containing post request information (required)
        :param str table_prefix: (development only) An optional identifier used to prefix snowflake tables.. These tables must be defined in the corresponding environment prior to use.
        :return: Request
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_request_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_request_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_request_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a Request  # noqa: E501

        Create a new request for a Compass report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_request_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: A JSON object containing post request information (required)
        :param str table_prefix: (development only) An optional identifier used to prefix snowflake tables.. These tables must be defined in the corresponding environment prior to use.
        :return: Request
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'table_prefix']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'table_prefix' in params:
            header_params['Table-Prefix'] = params['table_prefix']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuthorization']  # noqa: E501

        return self.api_client.call_api(
            '/requests', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Request',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_request(self, request_id, **kwargs):  # noqa: E501
        """Delete a Request  # noqa: E501

        Delete a specified Compass request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_request(request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int request_id: Unique identifier of a Compass request. (required)
        :param str table_prefix: (development only) An optional identifier used to prefix snowflake tables.. These tables must be defined in the corresponding environment prior to use.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_request_with_http_info(request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_request_with_http_info(request_id, **kwargs)  # noqa: E501
            return data

    def delete_request_with_http_info(self, request_id, **kwargs):  # noqa: E501
        """Delete a Request  # noqa: E501

        Delete a specified Compass request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_request_with_http_info(request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int request_id: Unique identifier of a Compass request. (required)
        :param str table_prefix: (development only) An optional identifier used to prefix snowflake tables.. These tables must be defined in the corresponding environment prior to use.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_id', 'table_prefix']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request_id' is set
        if ('request_id' not in params or
                params['request_id'] is None):
            raise ValueError("Missing the required parameter `request_id` when calling `delete_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'request_id' in params:
            path_params['requestId'] = params['request_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'table_prefix' in params:
            header_params['Table-Prefix'] = params['table_prefix']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuthorization']  # noqa: E501

        return self.api_client.call_api(
            '/requests/{requestId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_request(self, request_id, **kwargs):  # noqa: E501
        """Get a Request  # noqa: E501

        Get information about a specific Compass request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_request(request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int request_id: Unique identifier of a Compass request. (required)
        :param str fields: Fields to return as part of the response for a request object, where multiple fields are separated by a comma.
        :param str table_prefix: (development only) An optional identifier used to prefix snowflake tables.. These tables must be defined in the corresponding environment prior to use.
        :return: Request
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_request_with_http_info(request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_request_with_http_info(request_id, **kwargs)  # noqa: E501
            return data

    def get_request_with_http_info(self, request_id, **kwargs):  # noqa: E501
        """Get a Request  # noqa: E501

        Get information about a specific Compass request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_request_with_http_info(request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int request_id: Unique identifier of a Compass request. (required)
        :param str fields: Fields to return as part of the response for a request object, where multiple fields are separated by a comma.
        :param str table_prefix: (development only) An optional identifier used to prefix snowflake tables.. These tables must be defined in the corresponding environment prior to use.
        :return: Request
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_id', 'fields', 'table_prefix']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request_id' is set
        if ('request_id' not in params or
                params['request_id'] is None):
            raise ValueError("Missing the required parameter `request_id` when calling `get_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'request_id' in params:
            path_params['requestId'] = params['request_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}
        if 'table_prefix' in params:
            header_params['Table-Prefix'] = params['table_prefix']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuthorization']  # noqa: E501

        return self.api_client.call_api(
            '/requests/{requestId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Request',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_requests(self, **kwargs):  # noqa: E501
        """Get all Requests  # noqa: E501

        Get information about all Compass requests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_requests(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fields: Fields to return as part of the response for a request object, where multiple fields are separated by a comma.
        :param str sort: Field to sort results by, used in conjunction with `order`.
        :param str order: Order by ascending or descending, used in conjunction with `sort`.
        :param int max: The number of requests to return on a single call, used in conjunction with `offset`. Up to 1000 records can be retrieved in a single call.
        :param int offset: The row number after which the limited/fetched rows are returned, used in conjunction with `max`.
        :param str search: Search for Compass requests based on a search term. Search can be used with filters. Must be at least three characters.
        :param str q: Search for Compass requests based on a set of filter criteria. Filters can be used with search. Must be at least three characters.
        :param str table_prefix: (development only) An optional identifier used to prefix snowflake tables.. These tables must be defined in the corresponding environment prior to use.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_requests_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_requests_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_requests_with_http_info(self, **kwargs):  # noqa: E501
        """Get all Requests  # noqa: E501

        Get information about all Compass requests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_requests_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fields: Fields to return as part of the response for a request object, where multiple fields are separated by a comma.
        :param str sort: Field to sort results by, used in conjunction with `order`.
        :param str order: Order by ascending or descending, used in conjunction with `sort`.
        :param int max: The number of requests to return on a single call, used in conjunction with `offset`. Up to 1000 records can be retrieved in a single call.
        :param int offset: The row number after which the limited/fetched rows are returned, used in conjunction with `max`.
        :param str search: Search for Compass requests based on a search term. Search can be used with filters. Must be at least three characters.
        :param str q: Search for Compass requests based on a set of filter criteria. Filters can be used with search. Must be at least three characters.
        :param str table_prefix: (development only) An optional identifier used to prefix snowflake tables.. These tables must be defined in the corresponding environment prior to use.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields', 'sort', 'order', 'max', 'offset', 'search', 'q', 'table_prefix']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_requests" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'max' in params:
            query_params.append(('max', params['max']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}
        if 'table_prefix' in params:
            header_params['Table-Prefix'] = params['table_prefix']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuthorization']  # noqa: E501

        return self.api_client.call_api(
            '/requests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_request(self, body, request_id, **kwargs):  # noqa: E501
        """Update a Request  # noqa: E501

        Patch a specific Compass request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_request(body, request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: A JSON object containing patch request information (required)
        :param int request_id: Unique identifier of a Compass request. (required)
        :param str table_prefix: (development only) An optional identifier used to prefix snowflake tables.. These tables must be defined in the corresponding environment prior to use.
        :return: Request
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_request_with_http_info(body, request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_request_with_http_info(body, request_id, **kwargs)  # noqa: E501
            return data

    def patch_request_with_http_info(self, body, request_id, **kwargs):  # noqa: E501
        """Update a Request  # noqa: E501

        Patch a specific Compass request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_request_with_http_info(body, request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: A JSON object containing patch request information (required)
        :param int request_id: Unique identifier of a Compass request. (required)
        :param str table_prefix: (development only) An optional identifier used to prefix snowflake tables.. These tables must be defined in the corresponding environment prior to use.
        :return: Request
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'request_id', 'table_prefix']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_request`")  # noqa: E501
        # verify the required parameter 'request_id' is set
        if ('request_id' not in params or
                params['request_id'] is None):
            raise ValueError("Missing the required parameter `request_id` when calling `patch_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'request_id' in params:
            path_params['requestId'] = params['request_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'table_prefix' in params:
            header_params['Table-Prefix'] = params['table_prefix']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuthorization']  # noqa: E501

        return self.api_client.call_api(
            '/requests/{requestId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Request',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
